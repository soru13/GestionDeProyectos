{
  "name": "raven",
  "description": "A standalone (Node.js) client for Sentry",
  "keywords": [
    "raven",
    "sentry",
    "python"
  ],
  "version": "0.4.5",
  "repository": {
    "type": "git",
    "url": "git://github.com/mattrobenolt/raven-node.git"
  },
  "author": {
    "name": "Matt Robenolt",
    "email": "matt@ydekproductions.com"
  },
  "license": "BSD",
  "main": "index",
  "scripts": {
    "test": "NODE_ENV=test mocha --reporter dot"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "node-uuid": "1.4.0"
  },
  "devDependencies": {
    "connect": "*",
    "express": "*",
    "mocha": "*",
    "should": "*",
    "nock": "*",
    "glob": "*",
    "mock-udp": "*"
  },
  "readme": "# Raven [![Build Status](https://secure.travis-ci.org/mattrobenolt/raven-node.png?branch=master)](http://travis-ci.org/mattrobenolt/raven-node)\n**Node v0.9 compatible**\n\nLog errors and stack traces in [Sentry](http://getsentry.com/) from within your Node.js applications. Includes middleware support for [Connect](http://www.senchalabs.org/connect/)/[Express](http://expressjs.com/).\n\nAll processing and sending happens asynchronously to not slow things down if/when Sentry is down or slow.\n\n## Compatibility\n * 0.6.x\n * 0.8.x\n * 0.9.x (latest unstable)\n\n## Installation\n```\n$ npm install raven\n```\n\n## Basic Usage\n```javascript\nvar raven = require('raven');\nvar client = new raven.Client('{{ SENTRY_DSN }}');\n\nclient.captureMessage('Hello, world!');\n```\n\nRun with:\n```\n$ NODE_ENV=production node script.js\n```\n\n## Logging an error\n```javascript\nclient.captureError(new Error('Broke!'));\n```\n\n## Logging a query\n```javascript\nclient.captureQuery('SELECT * FROM `awesome`', 'mysql');\n```\n\n## Sentry Identifier\n```javascript\nclient.captureMessage('Hello, world!', function(result) {\n    console.log(client.getIdent(result));\n});\n```\n\n```javascript\nclient.captureError(new Error('Broke!'), function(result) {\n  console.log(client.getIdent(result));\n});\n```\n\n__Note__: `client.captureMessage` will also return the result directly without the need for a callback, such as: `var result = client.captureMessage('Hello, world!');`\n\n## Events\nIf you really care if the event was logged or errored out, Client emits two events, `logged` and `error`:\n\n```javascript\nclient.on('logged', function(){\n  console.log('Yay, it worked!');\n});\nclient.on('error', function(e){\n  console.log('oh well, Sentry is broke.');\n})\nclient.captureMessage('Boom');\n```\n\n### Error Event\nThe event error is augmented with the original Sentry response object as well as the response body and statusCode for easier debugging.\n\n```javascript\nclient.on('error', function(e){\n  console.log(e.responseBody);  // raw response body, usually contains a message explaining the failure\n  console.log(e.statusCode);  // status code of the http request\n  console.log(e.response);  // entire raw http response object\n});\n```\n\n## Environment variables\n### NODE_ENV\n`NODE_ENV` must be set to `production` for Sentry to actually work. Without being in production, a warning is issued and logging disabled.\n\n### SENTRY_DSN\nOptionally declare the DSN to use for the client through the environment. Initializing the client in your app won't require setting the DSN.\n\n### SENTRY_NAME\nOptionally set the name for the client to use. [What is name?](http://raven.readthedocs.org/en/latest/config/index.html#name)\n\n### SENTRY_SITE\nOptionally set the site for the client to use. [What is site?](http://raven.readthedocs.org/en/latest/config/index.html#site)\n\n## Catching global errors\nFor those times when you don't catch all errors in your application. ;)\n\n```javascript\nclient.patchGlobal();\n// or\nraven.patchGlobal(client);\n// or\nraven.patchGlobal('{{ SENTRY_DSN }}');\n```\n\nIt is recommended that you don't leave the process running after receiving an `uncaughtException` (http://nodejs.org/api/process.html#process_event_uncaughtexception), so an optional callback is provided to allow you to hook in something like:\n\n```javascript\nclient.patchGlobal(function() {\n  console.log('Bye, bye, world.')\n  process.exit(1);\n});\n```\n\nThe callback is called **after** the event has been sent to the Sentry server.\n\n## Methods\n```javascript\nnew raven.Client(dsn[, options])\nclient.captureMessage(string[,callback])\nclient.captureError(Error[,callback])\nclient.captureQuery(string, string[,callback])\n```\n\n## Integrations\n### Connect/Express middleware\nThe Raven middleware can be used as-is with either Connect or Express in the same way. Take note that in your middlewares, Raven must appear _after_ your main handler to pick up any errors that may result from handling a request.\n\n#### Connect\n```javascript\nvar connect = require('connect');\nfunction mainHandler(req, res) {\n  throw new Error('Broke!');\n}\nfunction onError(err, req, res, next) {\n  // The error id is attached to `res.sentry` to be returned\n  // and optionally displayed to the user for support.\n  res.statusCode = 500;\n  res.end(res.sentry+'\\n');\n}\nconnect(\n  connect.bodyParser(),\n  connect.cookieParser(),\n  mainHandler,\n  raven.middleware.connect('{{ SENTRY_DSN }}'),\n  onError, // optional error handler if you want to display the error id to a user\n).listen(3000);\n```\n\n#### Express\n```javascript\nvar app = require('express').createServer();\napp.use(raven.middleware.express('{{ SENTRY_DSN }}'));\napp.use(onError); // optional error handler if you want to display the error id to a user\napp.get('/', function mainHandler(req, res) {\n  throw new Error('Broke!');\n});\napp.listen(3000);\n```\n\n__Note__: `raven.middleware.express` or `raven.middleware.connect` *must* be added to the middleware stack *before* any other error handling middlewares or there's a chance that the error will never get to Sentry.\n\n## Support\nYou can find me on IRC. I troll in `#sentry` on `freenode`.\n",
  "_id": "raven@0.4.5",
  "_from": "raven@0.4.5"
}
