{
  "name": "hascan",
  "description": "Build tools for has.js.",
  "version": "0.0.8",
  "homepage": "http://github.com/joehewitt/hascan",
  "repository": {
    "type": "git",
    "url": "git://github.com/joehewitt/hascan.git"
  },
  "keywords": [],
  "author": {
    "name": "Joe Hewitt",
    "email": "joe@joehewitt.com"
  },
  "contributors": [],
  "dependencies": {
    "async": "",
    "dandy": "",
    "transformjs": "",
    "ua-parser": "",
    "underscore": ""
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./lib/hascan",
  "bin": {
    "hascan": "./bin/hascan"
  },
  "directories": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "hascan\n===========\n\nBuild slim versions of has.js or use has.js on the server to optimize your code.\n\nSlimming has.js\n---------------\n\n[has.js][] adds a non-trival amount of code to your pages.  With hascan, you can build a version of has.js that includes only the feature tests you actually use in your code.\n\n    hascan --build svg canvas audio-mp3\n\nThis will output a concatenation of the core of has.js and only the individual tests you call for.\n\n    hascan --build < /path/to/file.js\n\nThis will read the given file to find out which has('feature') tests are used and output a build of has.js for only those features.\n\nSlimming Your Code\n------------------\n\nGive Hascan a user-agent string and it will build a version of your code which eliminates has('feature') branches intended for other browsers.  Using data from [Browserscope][], Hascan can determine which features a browser supports, statically analyze your code using [Uglify][], and safely remove branches not intended for that browser.\n\n    hascan --eliminate -a \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.803.0 Safari/535.1\" < /path/to/file.js\n\nInstallation\n------------\n\n    $ npm install hascan\n\nUsage (command line)\n-------------------\n\n    Usage: hascan [options] [features]\n\n    Options:\n        -b, --build              builds has.js with only the tests you want\n                                    Use [features] arguments to specify feature tests to include\n                                    Use --file or stdin to include only features tested in JS source\n        -e, --eliminate          eliminates has() branches for unavailable features\n                                    Use [features] arguments to specify available features\n                                    Use --agent to look up the features available for a user-agent\n                                    Use --file option or stdin to provide JavaScript to process\n        -s, --features           shows a list of features supported by a user agent\n                                    Use --agent to specify the user-agent to query\n                                    Use [features] arguments to limit list to a set of features\n        -t, --tests              shows the names of all tests supported\n        -u, --update             downloads the latest data from Browserscope to has.json\n\n        -a, --agent              user agent string\n        -f, --file               path of a file to read in\n        -m, --minify             minify generated source code\n\n        -h, --help               output help information     \n\nUsage (from Node.js)\n-------------------\n\nEliminating code:\n\n    var hascan = require('hascan');    \n    var sourceCode = 'if (has(\"svg\")) { a() } else if (has(\"canvas\")) { b() } else { c() }';\n    var featureMap = {svg: false, canvas: true};\n    var smallerCode = hascan.eliminateFeatureTests(sourceCode, featureMap);\n    console.log(smallerCode);\n\n...\n    \n    {b()}\n\n        \nGetting features supported by a user-agent: \n\n    var hascan = require('hascan');\n    var userAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.803.0 Safari/535.1\";\n    hascan.getFeatureDB(['canvas', 'svg', 'activex'], function(err, featureDB) {\n        var featureMap = featureDB.getFeatureMap(userAgent);\n        console.log(featureMap);\n    });\n\n...\n\n    { canvas: true, svg: true, activex: false }\n\nBrowserscope\n------------\n\nHascan uses data posted to Browserscope here:\n\n[http://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnINCxIEVGVzdBiG3-0GDA?v=3](http://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnINCxIEVGVzdBiG3-0GDA?v=3)\n\nThis data may not yet cover all browsers. If there is a browser missing, [go here](http://joehewitt.com/has/tests/runTests.html) and post test results for that browser.\n\nLicense \n-------\n\nCopyright 2011 Joe Hewitt\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[has.js]: https://github.com/phiggins42/has.js\n[Browserscope]: http://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnINCxIEVGVzdBiG3-0GDA?v=3\n[Uglify]: https://github.com/mishoo/UglifyJS\n",
  "_id": "hascan@0.0.8",
  "_from": "hascan@"
}
