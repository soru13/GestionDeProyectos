{
  "name": "transformjs",
  "description": "Transforms JavaScript code.",
  "version": "0.0.3",
  "homepage": "http://github.com/joehewitt/transformjs",
  "repository": {
    "type": "git",
    "url": "http://github.com/joehewitt/transformjs.git"
  },
  "keywords": [],
  "author": {
    "name": "Joe Hewitt",
    "email": "joe@joehewitt.com"
  },
  "contributors": [],
  "dependencies": {
    "dandy": "",
    "uglify-js": "1.2.6"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./lib/transformjs",
  "directories": {},
  "readme": "transformjs\n===========\n\nTransforms JavaScript code safely.\n\nTransformJS is based on the [Uglify](https://github.com/mishoo/UglifyJS) JavaScript parser.  Once Uglify has parsed the JavaScript into an abstract syntax tree (AST), TransformJS allows you to traverse the AST and add, remove, replace, or modify nodes along the way.\n\nTransformJS can be used for static analysis to remove dead code or for searching for patterns in the code. If you're using hand-rolled regular expressions for transforming JavaScript, TransformJS offers you a safer option by parsing the code according to the language grammar and outputting valid code.\n\nInstallation\n------------\n\n    $ npm install transformjs\n\nUsage\n------------\n\nHere is an example that replaces all numbers with the value 2.\n\n    var transformjs = require('transformjs');\n    var ast = transformjs.transform('if (1) { a() } else { b() }', [\n        function(node, next) {\n            if (node.type == 'num') {\n                return {type: 'num', value: 2};\n            } else {\n                return next();\n            }\n        },\n    ]);\n\n    console.log(transformjs.generate(ast));\n\n\nTraversal occurs from top to bottom.  Filter functions are called in order for each node.\nThe filter can return the node unchanged, return a new node to take its place, or return null\nto remove the node.\n\nYou are responsible for calling the next() function in order to call the next filter. If you\ndo not call next(), then you are responsible for traversing each of the sub-nodes of the node\nby passing each sub-node to the next function. \n\n    function(node, next) {\n        if (node.type == 'binary') {\n            // Traverse the child nodes of the expression one by one\n            node.left = next(node.left);\n            node.right = next(node.right);\n            // Return the node without calling next, thereby ignoring subsequent filters\n            return node;\n        } else {\n            // Continue processing node and traversing its child nodes\n            return next();\n        }\n    }\n\nLicense \n-------\n\nCopyright 2011 Joe Hewitt\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "_id": "transformjs@0.0.3",
  "_from": "transformjs@"
}
